(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{411:function(e,t,s){"use strict";s.r(t);var a=s(25),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"command-line-args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#command-line-args"}},[e._v("#")]),e._v(" Command Line Args")]),e._v(" "),s("p",[e._v("With OpenCore Legacy Patcher, we include an extra binary called "),s("a",{attrs:{href:"https://github.com/dortania/OpenCore-Legacy-Patcher/releases/",target:"_blank",rel:"noopener noreferrer"}},[e._v("OCLP-CLI"),s("OutboundLink")],1),e._v(". The purpose of this binary is to easily run our OpenCore build process for other programs to hook onto. Below is documentation on currently supported arguments.")]),e._v(" "),s("h3",{attrs:{id:"build-arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-arguments"}},[e._v("#")]),e._v(" Build Arguments")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("--build")]),e._v(": Build OpenCore\n"),s("ul",[s("li",[s("strong",[e._v("--model xxxx")]),e._v(": override default model detection\n"),s("ul",[s("li",[e._v("ex. "),s("strong",[e._v("--model iMac11,2")])])])]),e._v(" "),s("li",[s("strong",[e._v("--metal_gpu xxxx")]),e._v(": override default GPU detection (ie. Nvidia, AMD)\n"),s("ul",[s("li",[s("strong",[e._v("--metal_gpu Nvidia")])])])]),e._v(" "),s("li",[s("strong",[e._v("--smbios_spoof xxxx")]),e._v(": set spoofing mode, defaults to Minimal if no arg provided (ie. Minimal, Moderate, Advanced)\n"),s("ul",[s("li",[e._v("ex. "),s("strong",[e._v("--smbios_spoof Moderate")])])])]),e._v(" "),s("li",[s("strong",[e._v("--verbose")]),e._v(": enable verbose booting")]),e._v(" "),s("li",[s("strong",[e._v("--debug_oc")]),e._v(": enable debug OpenCore")]),e._v(" "),s("li",[s("strong",[e._v("--debug_kext")]),e._v(": enable debug kexts")]),e._v(" "),s("li",[s("strong",[e._v("--skip_wifi")]),e._v(": skip wifi patch")]),e._v(" "),s("li",[s("strong",[e._v("--hide_picker")]),e._v(": hide OpenCore's picker")]),e._v(" "),s("li",[s("strong",[e._v("--disable_sip")]),e._v(": disables SIP")]),e._v(" "),s("li",[s("strong",[e._v("--disable_smb")]),e._v(": disables SecureBootModel")]),e._v(" "),s("li",[s("strong",[e._v("--vault")]),e._v(": enable OpenCore vaulting")])])])]),e._v(" "),s("p",[e._v("Example usage:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("./OCLP-CLI --build --verbose --debug_oc --debug_kext --model iMac11,2\n")])])]),s("p",[e._v("Note, when building OpenCore the output folder will be next to the OCLP binary as OpenCore-RELEASE or OpenCore-DEBUG folder.")]),e._v(" "),s("h3",{attrs:{id:"patch-system-arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#patch-system-arguments"}},[e._v("#")]),e._v(" Patch System Arguments")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("--patch_sys_vol")]),e._v(": patches root volume with detected hardware")])]),e._v(" "),s("p",[e._v("Example usage:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" ./OCLP-CLI --patch_sys_vol\n")])])]),s("p",[e._v("Note, root volume patching needs to be run as sudo")])])}),[],!1,null,null,null);t.default=r.exports}}]);