(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{418:function(e,i,t){"use strict";t.r(i);var a=t(25),o=Object(a.a)({},(function(){var e=this,i=e.$createElement,t=e._self._c||i;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"explaining-the-patches-in-opencore-legacy-patcher"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explaining-the-patches-in-opencore-legacy-patcher"}},[e._v("#")]),e._v(" Explaining the patches in OpenCore Legacy Patcher")]),e._v(" "),t("p",[e._v("In our patcher, there are numerous patches used to ensure a stable system. Here we're going to go over what patches are used and why we recommend or even require them.")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#opencore-settings"}},[e._v("OpenCore Settings")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#injected-kexts"}},[e._v("Injected Kexts")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#on-disk-patches"}},[e._v("On-Disk Patches")])])]),e._v(" "),t("h2",{attrs:{id:"opencore-settings"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#opencore-settings"}},[e._v("#")]),e._v(" OpenCore Settings")]),e._v(" "),t("p",[e._v("Below is a run down of the main logic OpenCore Legacy Patcher uses to gain native support in macOS. Note OpenCore's configuration is documented within "),t("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenCorePkg"),t("OutboundLink")],1),e._v(" as well as an online version provided by us:")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://dortania.github.io/docs/latest/Configuration.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenCorePkg Online Docs"),t("OutboundLink")],1)])]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("Configuration Explanation")]),e._v(" "),t("h3",{attrs:{id:"acpi-patch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#acpi-patch"}},[e._v("#")]),e._v(" ACPI -> Patch")]),e._v(" "),t("ul",[t("li",[e._v("EHCx and XHC1 Patches\n"),t("ul",[t("li",[e._v("Reason: Required for proper USB operation")]),e._v(" "),t("li",[e._v("Logic: Avoids USB maps of newer models attaching and breaking USB port functionality")]),e._v(" "),t("li",[e._v("Models: All models require when spoofing with Moderate or Advanced SMBIOS")])])])]),e._v(" "),t("h3",{attrs:{id:"booter-quirks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#booter-quirks"}},[e._v("#")]),e._v(" Booter -> Quirks")]),e._v(" "),t("ul",[t("li",[e._v("ForceBooterSignature\n"),t("ul",[t("li",[e._v("Reason: Required to ensure Hibernation support")]),e._v(" "),t("li",[e._v("Logic: Tricks boot.efi into thinking OpenCore is Apple's firmware")]),e._v(" "),t("li",[e._v("Models: All models require")])])])]),e._v(" "),t("h3",{attrs:{id:"deviceproperties-add"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deviceproperties-add"}},[e._v("#")]),e._v(" DeviceProperties -> Add")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("PciRoot(0x0)/Pci(0x15,0x0)/Pci(0x0,0x0)")])]),e._v(" "),t("li",[t("code",[e._v("PciRoot(0x0)/Pci(0x1C,0x4)/Pci(0x0,0x0)")])]),e._v(" "),t("li",[t("code",[e._v("PciRoot(0x0)/Pci(0x1C,0x3)/Pci(0x0,0x0)")])]),e._v(" "),t("li",[t("code",[e._v("PciRoot(0x0)/Pci(0x1C,0x5)/Pci(0x0,0x0)")])]),e._v(" "),t("li",[t("code",[e._v("PciRoot(0x0)/Pci(0x1C,0x1)/Pci(0x0,0x0)")]),e._v(" "),t("ul",[t("li",[e._v("Reason: Required to ensure Wifi works with full, native support")]),e._v(" "),t("li",[e._v("Logic: Tricks AirPortBrcmNIC.kext into thinking our device is a BCM94360 ("),t("code",[e._v("14e4,43ba")]),e._v(")")]),e._v(" "),t("li",[e._v("Models: Machines with BCM943224 and BCM94331 chipsets")])])]),e._v(" "),t("li",[t("code",[e._v("PciRoot(0x0)/Pci(0x3,0x0)/Pci(0x0,0x0)")])]),e._v(" "),t("li",[t("code",[e._v("PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x0)")]),e._v(" "),t("ul",[t("li",[e._v("Reason: Required to ensure Brightness Control works on upgraded iMacs")]),e._v(" "),t("li",[e._v("Logic: Sets AppleBackLight properties")]),e._v(" "),t("li",[e._v("Models: iMac11,x and iMac12,x with upgraded Nvidia Metal GPUs")])])]),e._v(" "),t("li",[t("code",[e._v("PciRoot(0x0)/Pci(0x2,0x0)")]),e._v(" "),t("ul",[t("li",[e._v("Reason: Disables internal GPU to fix sleep issues on upgrades iMacs")]),e._v(" "),t("li",[e._v("Logic: Tricks macOS into thinking iGPU is a generic PCI device")]),e._v(" "),t("li",[e._v("Models: iMac12,x with upgraded Metal GPUs")])])])]),e._v(" "),t("h3",{attrs:{id:"kernel-patch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kernel-patch"}},[e._v("#")]),e._v(" Kernel -> Patch")]),e._v(" "),t("ul",[t("li",[e._v("SMC Patch\n"),t("ul",[t("li",[e._v("Reason: Required to avoid SMC Firmware updates")]),e._v(" "),t("li",[e._v("Logic: Patches out "),t("code",[e._v("smc-version")]),e._v(" in AppleSMC.kext, requires SMC-Spoof.kext for full functionality")]),e._v(" "),t("li",[e._v("Models: All models require when spoofing SMBIOS")])])]),e._v(" "),t("li",[e._v("IOHIDFamily Patch\n"),t("ul",[t("li",[e._v("Reason: Required for HID peripheral support in macOS on older hardware")]),e._v(" "),t("li",[e._v("Logic: Tricks IOHIDFamily into thinking it's always booting recovery")]),e._v(" "),t("li",[e._v("Models: Penryn CPUs (Core2 series)")])])])]),e._v(" "),t("h3",{attrs:{id:"kernel-quirks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kernel-quirks"}},[e._v("#")]),e._v(" Kernel -> Quirks")]),e._v(" "),t("ul",[t("li",[e._v("ThridPartyDrives\n"),t("ul",[t("li",[e._v("Reason: Required to avoid Hibernation wake issues on 3rd party drives")]),e._v(" "),t("li",[e._v("Logic: Patches AppleAHCIPort.kext into support")]),e._v(" "),t("li",[e._v("Models: All models with standard SATA ports")])])]),e._v(" "),t("li",[e._v("PanicNoKextDump\n"),t("ul",[t("li",[e._v("Reason: Avoids kext dump on kernel panics, easier kernel debugging")]),e._v(" "),t("li",[e._v("Logic: Patches Kernel to not dump dump unnecessary info")]),e._v(" "),t("li",[e._v("Models: Only set when Verbose Boot is enabled by the user")])])])]),e._v(" "),t("h3",{attrs:{id:"misc-security"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#misc-security"}},[e._v("#")]),e._v(" Misc -> Security")]),e._v(" "),t("ul",[t("li",[e._v("SecureBootModel\n"),t("ul",[t("li",[e._v("Reason: Required to ensure seamless OS updates with Big Sur")]),e._v(" "),t("li",[e._v("Logic: Sets iMacPro1,1's Secure Enclave Identifier (j137)")]),e._v(" "),t("li",[e._v("Models: All models require")])])])]),e._v(" "),t("h3",{attrs:{id:"nvram-add"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nvram-add"}},[e._v("#")]),e._v(" NVRAM -> Add")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("-v debug=0x100")]),e._v(" "),t("ul",[t("li",[e._v("Reason: Used to see debug info of macOS's kernel and kexts, and avoids reboots on panic")]),e._v(" "),t("li",[e._v("Logic: Adds args to NVRAM")]),e._v(" "),t("li",[e._v("Models: Only set when Verbose Boot is enabled by the user")])])]),e._v(" "),t("li",[t("code",[e._v("-liludbgall")]),e._v(" "),t("ul",[t("li",[e._v("Reason: Enables Lilu and plugin debug logging")]),e._v(" "),t("li",[e._v("Logic: Adds args to NVRAM")]),e._v(" "),t("li",[e._v("Models: Only set when Kext DEBUG is enabled by the user")])])]),e._v(" "),t("li",[t("code",[e._v("msgbuf=1048576")]),e._v(" "),t("ul",[t("li",[e._v("Reason: Sets message buffer size to 1MB, ensures boot logs are retained")]),e._v(" "),t("li",[e._v("Logic: Adds args to NVRAM")]),e._v(" "),t("li",[e._v("Models: Only set when Kext DEBUG is enabled by the user")])])]),e._v(" "),t("li",[t("code",[e._v("agdpmod=pikera")]),e._v(" "),t("ul",[t("li",[e._v("Reason: Fixes GPU switching on MacBookPro9,x")]),e._v(" "),t("li",[e._v("Logic: Adds args to NVRAM")]),e._v(" "),t("li",[e._v("Models: MacBookPro9,x")])])]),e._v(" "),t("li",[t("code",[e._v("shikigva=80 unfairgva=1")])]),e._v(" "),t("li",[t("code",[e._v("shikigva=128 unfairgva=1 -wegtree")]),e._v(" "),t("ul",[t("li",[e._v("Reason: Fixes DRM support on models with upgraded AMD Metal GPUs")]),e._v(" "),t("li",[e._v("Logic: Adds args to NVRAM")]),e._v(" "),t("li",[e._v("Models: Models with upgraded AMD Metal GPUs")])])])]),e._v(" "),t("h3",{attrs:{id:"uefi-protocoloverrides"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uefi-protocoloverrides"}},[e._v("#")]),e._v(" UEFI -> ProtocolOverrides")]),e._v(" "),t("ul",[t("li",[e._v("GopPassThrough\n"),t("ul",[t("li",[e._v("Reason: Used for proper output on machines with UGA firmware but GOP GPU")]),e._v(" "),t("li",[e._v("Logic: Provide GOP protocol instances on top of UGA protocol instances")]),e._v(" "),t("li",[e._v("Models: MacPro3,1, MacBook4,1 iMac7,1-8,1")])])])])]),e._v(" "),t("h2",{attrs:{id:"injected-kext"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#injected-kext"}},[e._v("#")]),e._v(" Injected Kext")]),e._v(" "),t("p",[e._v("Below is an explanation of what Kexts OpenCore Legacy Patcher will inject into memory on boot-up.")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("Injected Kext Explanation")]),e._v(" "),t("h3",{attrs:{id:"acidanthera"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#acidanthera"}},[e._v("#")]),e._v(" Acidanthera")]),e._v(" "),t("ul",[t("li",[e._v("Lilu\n"),t("ul",[t("li",[e._v("Reason: Patching engine for other kexts")]),e._v(" "),t("li",[e._v("Models: All models require")])])]),e._v(" "),t("li",[e._v("WhateverGreen\n"),t("ul",[t("li",[e._v("Reason: Patches GPU Frameworks and kext to ensure proper support")]),e._v(" "),t("li",[e._v("Models: All models require")])])]),e._v(" "),t("li",[e._v("CPUFriend\n"),t("ul",[t("li",[e._v("Reason: Patches IOx86PlatformPlugin to restore previous CPU profiles")]),e._v(" "),t("li",[e._v("Models: 2012 and newer models")])])]),e._v(" "),t("li",[e._v("AirportBrcmFixup\n"),t("ul",[t("li",[e._v("Reason: Patches IO80211 and co to fix networking support for unsupported cards")]),e._v(" "),t("li",[e._v("Models: BCM943224 and BCM94331")])])]),e._v(" "),t("li",[e._v("RestrictEvents\n"),t("ul",[t("li",[e._v("Reason: Disables memory errors on MacPro7,1")]),e._v(" "),t("li",[e._v("Models: Mac Pros and Xserves")])])])]),e._v(" "),t("h3",{attrs:{id:"ethernet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ethernet"}},[e._v("#")]),e._v(" Ethernet")]),e._v(" "),t("ul",[t("li",[e._v("nForceEthernet\n"),t("ul",[t("li",[e._v("Reason: Inject old Nvidia Ethernet kext to resolve networking in Catalina and newer")]),e._v(" "),t("li",[e._v("Models: 2010 and older Nvidia Ethernet require")])])]),e._v(" "),t("li",[e._v("MarvelYukonEthernet\n"),t("ul",[t("li",[e._v("Reason: Inject old Marvel Ethernet kext to resolve networking in Catalina and newer")]),e._v(" "),t("li",[e._v("Models: 2008 and older Marvel Ethernet require")])])]),e._v(" "),t("li",[e._v("CatalinaBCM5701Ethernet\n"),t("ul",[t("li",[e._v("Reason: Inject old Broadcom Ethernet kext to resolve networking in Big Sur")]),e._v(" "),t("li",[e._v("Logic: Patch out conflicting symbols to not colide existing BCM5701Ethernet")]),e._v(" "),t("li",[e._v("Models: 2011 and older Broadcom Ethernet require")])])])]),e._v(" "),t("h3",{attrs:{id:"maps"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maps"}},[e._v("#")]),e._v(" Maps")]),e._v(" "),t("ul",[t("li",[e._v("USBMap\n"),t("ul",[t("li",[e._v("Reason: Inject old USB map profiles to fix USB")]),e._v(" "),t("li",[e._v("Models: All models require")])])])]),e._v(" "),t("h3",{attrs:{id:"sse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sse"}},[e._v("#")]),e._v(" SSE")]),e._v(" "),t("ul",[t("li",[e._v("AAMouSSE\n"),t("ul",[t("li",[e._v("Reason: Translates SSE4.2 instructions to compatible code for SSE4,1 CPUs, required for AMD Metal drives")]),e._v(" "),t("li",[e._v("Models: MacPro3,1")])])]),e._v(" "),t("li",[e._v("telemetrap\n"),t("ul",[t("li",[e._v("Reason: Ensures temelemtry.plugin doesn't run, required for SSE4,1 CPUs")]),e._v(" "),t("li",[e._v("Models: Penryn CPUs")])])])]),e._v(" "),t("h3",{attrs:{id:"wifi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wifi"}},[e._v("#")]),e._v(" Wifi")]),e._v(" "),t("ul",[t("li",[e._v("IO80211HighSierra\n"),t("ul",[t("li",[e._v("Reason: Re-inject Atheros wifi drivers from High Sierra")]),e._v(" "),t("li",[e._v("Logic: Patch out conflicting symbols to not colide existing IO80211Family")]),e._v(" "),t("li",[e._v("Models: Atheros cards")])])]),e._v(" "),t("li",[e._v("IO80211Mojave\n"),t("ul",[t("li",[e._v("Reason: Re-inject Broadcom wifi drivers from Mojave")]),e._v(" "),t("li",[e._v("Logic: Patch out conflicting symbols to not colide existing IO80211Family")]),e._v(" "),t("li",[e._v("Models: BCM94322")])])])]),e._v(" "),t("h3",{attrs:{id:"misc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#misc"}},[e._v("#")]),e._v(" Misc")]),e._v(" "),t("ul",[t("li",[e._v("AppleBackLightFixup\n"),t("ul",[t("li",[e._v("Reason: Patch AppleBacklight for iMacs with Nvidia Metal GPU upgrades")]),e._v(" "),t("li",[e._v("Models: iMac11,x, iMac12,x with upgraded Nvidia Metal GPUs")])])]),e._v(" "),t("li",[e._v("AppleIntelPIIXATA\n"),t("ul",[t("li",[e._v("Reason: Fix IDE support on MacPro3,1")]),e._v(" "),t("li",[e._v("Models: MacPro3,1")])])]),e._v(" "),t("li",[e._v("AppleIntelMCEDisabler\n"),t("ul",[t("li",[e._v("Reason: Fix dual socket support in Catalina and newer")]),e._v(" "),t("li",[e._v("Models: Mac Pros and Xserves")])])]),e._v(" "),t("li",[e._v("NightShiftEnabler\n"),t("ul",[t("li",[e._v("Reason: Enables NightShift support on unsupported models")]),e._v(" "),t("li",[e._v("Models: 2011 and older, MacBookPro9,x included")])])]),e._v(" "),t("li",[e._v("SMC-Spoof\n"),t("ul",[t("li",[e._v("Reason: Spoofs SMC version to 9.9999")]),e._v(" "),t("li",[e._v("Models: All models require")])])])])]),e._v(" "),t("h2",{attrs:{id:"on-disk-patches"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#on-disk-patches"}},[e._v("#")]),e._v(" On-Disk Patches")]),e._v(" "),t("p",[e._v("Unfortunately certain on-disk patches are required to achieve full functionality. Below is a breakdown of patches supported")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("Audio Patches")]),e._v(" "),t("h3",{attrs:{id:"extensions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extensions"}},[e._v("#")]),e._v(" Extensions")]),e._v(" "),t("ul",[t("li",[e._v("AppleHDA\n"),t("ul",[t("li",[e._v("Reason: Re-add El Capitan's AppleHDA to achieve audio support")]),e._v(" "),t("li",[e._v("Models: iMac7,1 and iMac8,1")])])])])]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("Acceleration Patches")]),e._v(" "),t("h3",{attrs:{id:"extensions-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extensions-2"}},[e._v("#")]),e._v(" Extensions")]),e._v(" "),t("h4",{attrs:{id:"general-patches"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#general-patches"}},[e._v("#")]),e._v(" General Patches")]),e._v(" "),t("ul",[t("li",[e._v("IOSurface.kext\n"),t("ul",[t("li",[e._v("Reason: Fixes immediate logout on login")]),e._v(" "),t("li",[e._v("Logic: Downgrade to Catalina IOSurface")]),e._v(" "),t("li",[e._v("Note: For AMD and Intel, additional "),t("code",[e._v("addMemoryRegion/removeMemoryRegion")]),e._v(" patch added changing the first conditional jump to non conditional jump\n"),t("ul",[t("li",[e._v("At Offset "),t("code",[e._v("0xdb52")]),e._v(" and "),t("code",[e._v("0xdbc6")]),e._v(", replace following bytes with "),t("code",[e._v("0xeb")])])])])])])]),e._v(" "),t("h4",{attrs:{id:"dropped-acceleration-binaries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dropped-acceleration-binaries"}},[e._v("#")]),e._v(" Dropped Acceleration Binaries")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Nvidia Binaries")]),e._v(" "),t("ul",[t("li",[e._v("GeForceGA.bundle")]),e._v(" "),t("li",[e._v("GeForceTesla.kext\n"),t("ul",[t("li",[e._v("Skip IOFree Panic - Mojave+\n"),t("ul",[t("li",[e._v("At Offset "),t("code",[e._v("0x5CF9A")]),e._v(" replace following bytes with "),t("code",[e._v("0xEB")])])])]),e._v(" "),t("li",[e._v("Avoids "),t("code",[e._v("addMemoryRegion/removeMemoryRegion")]),e._v(" calls\n"),t("ul",[t("li",[e._v("At Offset "),t("code",[e._v("0x5527")]),e._v(" and "),t("code",[e._v("0x77993")]),e._v(", replace following bytes with "),t("code",[e._v("0x909090909090")])])])])])]),e._v(" "),t("li",[e._v("GeForceTeslaGLDriver.bundle")]),e._v(" "),t("li",[e._v("GeForceTeslaVADriver.bundle")]),e._v(" "),t("li",[e._v("NVDANV50HalTesla.kext")]),e._v(" "),t("li",[e._v("NVDAResmanTesla.kext\n"),t("ul",[t("li",[e._v("0x1ea59a - 0x1ea5b3: nop")]),e._v(" "),t("li",[e._v("Replace VSLGestalt to IOLockLock or any other known symbol of the same length.")])])])])]),e._v(" "),t("li",[t("p",[e._v("AMD/ATI Binaries")]),e._v(" "),t("ul",[t("li",[e._v("AMD2400Controller.kext")]),e._v(" "),t("li",[e._v("AMD2600Controller.kext")]),e._v(" "),t("li",[e._v("AMD3800Controller.kext")]),e._v(" "),t("li",[e._v("AMD4600Controller.kext")]),e._v(" "),t("li",[e._v("AMD4800Controller.kext")]),e._v(" "),t("li",[e._v("AMD5000Controller.kext")]),e._v(" "),t("li",[e._v("AMD6000Controller.kext")]),e._v(" "),t("li",[e._v("AMDFramebuffer.kext")]),e._v(" "),t("li",[e._v("AMDLegacyFramebuffer.kext")]),e._v(" "),t("li",[e._v("AMDLegacySupport.kext")]),e._v(" "),t("li",[e._v("AMDRadeonVADriver.bundle")]),e._v(" "),t("li",[e._v("AMDRadeonVADriver2.bundle")]),e._v(" "),t("li",[e._v("AMDRadeonX3000.kext")]),e._v(" "),t("li",[e._v("AMDRadeonX3000GLDriver.bundle")]),e._v(" "),t("li",[e._v("AMDShared.bundle")]),e._v(" "),t("li",[e._v("AMDSupport.kext")]),e._v(" "),t("li",[e._v("ATIRadeonX2000.kext")]),e._v(" "),t("li",[e._v("ATIRadeonX2000GA.plugin")]),e._v(" "),t("li",[e._v("ATIRadeonX2000GLDriver.bundle")]),e._v(" "),t("li",[e._v("ATIRadeonX2000VADriver.bundle")])])]),e._v(" "),t("li",[t("p",[e._v("Intel 5th Gen Binaries")]),e._v(" "),t("ul",[t("li",[e._v("AppleIntelFramebufferAzul.kext")]),e._v(" "),t("li",[e._v("AppleIntelFramebufferCapri.kext")]),e._v(" "),t("li",[e._v("AppleIntelHDGraphics.kext")]),e._v(" "),t("li",[e._v("AppleIntelHDGraphicsFB.kext")]),e._v(" "),t("li",[e._v("AppleIntelHDGraphicsGA.plugin")]),e._v(" "),t("li",[e._v("AppleIntelHDGraphicsGLDriver.bundle")]),e._v(" "),t("li",[e._v("AppleIntelHDGraphicsVADriver.bundle")])])]),e._v(" "),t("li",[t("p",[e._v("Intel 6th Gen Binaries")]),e._v(" "),t("ul",[t("li",[e._v("AppleIntelHD3000Graphics.kext")]),e._v(" "),t("li",[e._v("AppleIntelHD3000GraphicsGA.plugin")]),e._v(" "),t("li",[e._v("AppleIntelHD3000GraphicsGLDriver.bundle")]),e._v(" "),t("li",[e._v("AppleIntelHD3000GraphicsVADriver.bundle")]),e._v(" "),t("li",[e._v("AppleIntelSNBGraphicsFB.kext\n"),t("ul",[t("li",[e._v("Board ID Patch\n"),t("ul",[t("li",[e._v("Replace original Board ID with updated model")])])])])]),e._v(" "),t("li",[e._v("AppleIntelSNBVA.bundle")])])])]),e._v(" "),t("h3",{attrs:{id:"frameworks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#frameworks"}},[e._v("#")]),e._v(" Frameworks")]),e._v(" "),t("ul",[t("li",[e._v("CoreDisplay.framework\n"),t("ul",[t("li",[e._v("Logic: Copied from Mojave, heavy modifications/shims")])])]),e._v(" "),t("li",[e._v("IOSurface.framework")]),e._v(" "),t("li",[e._v("OpenGL.framework\n"),t("ul",[t("li",[e._v("Logic: Copied from Mojave")])])])]),e._v(" "),t("h3",{attrs:{id:"privateframeworks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#privateframeworks"}},[e._v("#")]),e._v(" PrivateFrameworks")]),e._v(" "),t("ul",[t("li",[e._v("GPUSupport.framework\n"),t("ul",[t("li",[e._v("Logic: Copied from Mojave")])])]),e._v(" "),t("li",[e._v("SkyLight.framework\n"),t("ul",[t("li",[e._v("Logic: Copied from Mojave, heavy modifications/shims")])])])]),e._v(" "),t("h3",{attrs:{id:"launchdaemons"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#launchdaemons"}},[e._v("#")]),e._v(" LaunchDaemons")]),e._v(" "),t("ul",[t("li",[e._v("HiddHack.plist\n"),t("ul",[t("li",[e._v("Reason: Fixes unresponsive input when patching Skylight")]),e._v(" "),t("li",[e._v("Logic: Forces "),t("code",[e._v("hidd")]),e._v(" to register events, as Skylight handles them by default in Big Sur")])])])])])])}),[],!1,null,null,null);i.default=o.exports}}]);